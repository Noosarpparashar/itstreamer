
jenkins-sa.yaml
-------------------------------------------------------------------------------------------------------------------------
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: jenkins
rules:
- apiGroups:
  - '*'
  resources:
  - statefulsets
  - services
  - replicationcontrollers
  - replicasets
  - podtemplates
  - podsecuritypolicies
  - pods
  - pods/log
  - pods/exec
  - podpreset
  - poddisruptionbudget
  - persistentvolumes
  - persistentvolumeclaims
  - jobs
  - endpoints
  - deployments
  - deployments/scale
  - daemonsets
  - cronjobs
  - configmaps
  - namespaces
  - events
  - secrets
  verbs:
  - create
  - get
  - watch
  - delete
  - list
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts:jenkins

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
deployment yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
        -
          image: "jenkins/jenkins:2.190.2-jdk11"
          name: jenkins
          ports:
            -
              containerPort: 8080
          volumeMounts:
            -
              mountPath: /var/jenkins_home
              name: jenkins
      securityContext:
        fsGroup: 2000
      volumes:
        -
          name: jenkins
          persistentVolumeClaim:
            claimName: jenkins-pv-claim
            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
jenkins service yaml

apiVersion: v1
kind: Service
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  type: ClusterIP
  ports:
    - name: ui
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: slave
      port: 50000
      protocol: TCP
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app: jenkins
    
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
persistenceVolumeClaim

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pv-claim
  labels:
    type: amazonEBS
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 80Gi
      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv-volume
  labels:
    type: amazonEBS
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  awsElasticBlockStore:
    volumeID: vol-03fefce2345977d86
    fsType: ext4
    
    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ingressFiles
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  #namespace: game-2048
  name: ingress-jenkins
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance
spec:
  rules:
    - host: noosarp.cloudplatform.com
      http:
        paths:
          - path: /*
            backend:
              serviceName: jenkins
              servicePort: 80
--------------------------------------------------------------------------------------------------------------------------------------------------
create_service_account:
	eksctl create iamserviceaccount \
      --cluster=prasoon-eks-cluster \
      --namespace=kube-system \
      --name=aws-load-balancer-controller \
      --attach-policy-arn=arn:aws:iam::113099871417:policy/AWSLoadBalancerControllerIAMPolicy \
      --override-existing-serviceaccounts \
      --approve



